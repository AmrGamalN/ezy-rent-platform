version: "3.8"

x-mongo-common: &mongo-common
  image: mongo
  command: ["bash", "-c", "chmod 600 /etc/mongo-keyfile && mongod --auth --replSet rs0 --keyFile /etc/mongo-keyfile --bind_ip_all"]
  environment:
    MONGO_INITDB_ROOT_USERNAME: root
    MONGO_INITDB_ROOT_PASSWORD: example
  networks:
    - mongo-cluster
  restart: always

services:
  mongo1:
    <<: *mongo-common
    container_name: mongo1
    ports:
      - "27017:27017"
    volumes:
      - mongo1-data:/data/db
      - ./mongo-keyfile:/etc/mongo-keyfile
      - ./init-mongo.js:/docker-entrypoint-initdb.d/init-mongo.js:ro

  mongo2:
    <<: *mongo-common
    container_name: mongo2
    ports:
      - "27018:27017"
    volumes:
      - mongo2-data:/data/db
      - ./mongo-keyfile:/etc/mongo-keyfile
      - ./init-mongo.js:/docker-entrypoint-initdb.d/init-mongo.js:ro

  mongo3:
    <<: *mongo-common
    container_name: mongo3
    ports:
      - "27019:27017"
    volumes:
      - mongo3-data:/data/db
      - ./mongo-keyfile:/etc/mongo-keyfile
      - ./init-mongo.js:/docker-entrypoint-initdb.d/init-mongo.js:ro

  redis:
    image: redis
    container_name: redis
    ports:
      - "6379:6379"
    networks:
      - mongo-cluster
    restart: always

  auth-service:
    container_name: auth-service
    volumes:
      - ./auth-service:/app
    env_file:
      - ./auth-service/.env
    ports:
      - "3000:3000"
    depends_on:
      - mongo1
      - mongo2
      - mongo3
      - redis
    networks:
      - mongo-cluster

  car-service:
    container_name: car-service
    volumes:
      - ./car-service:/app
    env_file:
      - ./car-service/.env
    ports:
      - "4000:4000"
    depends_on:
      - mongo1
      - mongo2
      - mongo3
      - redis
    networks:
      - mongo-cluster

  nginx:
    image: nginx:stable-alpine
    container_name: nginx
    volumes:
      - ./nginx/default.conf:/etc/nginx/conf.d/default.conf
    ports:
      - "80:80"
    depends_on:
      - auth-service
      - car-service
    networks:
      - mongo-cluster

  mongo-express:
    image: mongo-express
    container_name: mongo-express
    restart: always
    ports:
      - "8081:8081"
    environment:
      ME_CONFIG_MONGODB_ADMINUSERNAME: root
      ME_CONFIG_MONGODB_ADMINPASSWORD: example
      ME_CONFIG_MONGODB_URL: mongodb://root:example@mongo1:27017,mongo2:27017,mongo3:27017/?replicaSet=rs0
      ME_CONFIG_BASICAUTH: false
    depends_on:
      - mongo1
      - mongo2
      - mongo3
    networks:
      - mongo-cluster

  elasticsearch:
    image: docker.elastic.co/elasticsearch/elasticsearch:8.13.4
    container_name: elasticsearch
    environment:
      - discovery.type=single-node
      - ES_JAVA_OPTS=-Xms512m -Xmx512m
      - xpack.security.enabled=false
      - xpack.security.transport.ssl.enabled=false
    ports:
      - "9200:9200"
    volumes:
      - esdata:/usr/share/elasticsearch/data
    networks:
      - mongo-cluster
    depends_on:
      - kafka
      - zookeeper

  kibana:
    image: docker.elastic.co/kibana/kibana:8.13.4
    container_name: kibana
    ports:
      - "5601:5601"
    environment:
      - ELASTICSEARCH_HOSTS=http://elasticsearch:9200
    depends_on:
      - elasticsearch
    networks:
      - mongo-cluster

  zookeeper:
    image: confluentinc/cp-zookeeper
    container_name: zookeeper
    environment:
      ZOOKEEPER_CLIENT_PORT: 2181

  kafka:
    image: confluentinc/cp-kafka
    container_name: kafka
    depends_on:
      - zookeeper
    ports:
      - "9092:9092"
    environment:
      KAFKA_BROKER_ID: 1
      KAFKA_ZOOKEEPER_CONNECT: zookeeper:2181
      KAFKA_ADVERTISED_LISTENERS: PLAINTEXT://kafka:9092
      KAFKA_OFFSETS_TOPIC_REPLICATION_FACTOR: 1



volumes:
  mongo1-data:
  mongo2-data:
  mongo3-data:
  esdata:

networks:
  mongo-cluster:
    driver: bridge
