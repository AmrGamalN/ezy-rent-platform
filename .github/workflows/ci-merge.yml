name: CI + Auto Merge

on:
  push:
    branches:
      - feature/*
  pull_request:
    branches:
      - main


jobs:
  build-and-test:
    runs-on: ubuntu-latest
    outputs:
      failed_step: ${{ steps.detect-failure.outputs.failed_step }}

    steps:
      # 1. Checkout the code
      - name: Checkout repository
        uses: actions/checkout@v3

      # 2. Setup Node.js
      - name: Setup Node.js
        uses: actions/setup-node@v3
        with:
          node-version: 20
          cache: npm

      # 3. Install dependencies using npm
      - name: Install dependencies
        id: install
        run: npm install

      # 4. Run ESLint to check code style and issues
      - name: Lint
        id: lint
        run: npm run lint

      # 5. Format code using Prettier
      - name: Format
        id: format
        run: npm run format

      # 6. Run TypeScript type checking
      - name: Type check
        id: type-check
        run: npm run type-check

      # 7. Run all unit and integration tests
      - name: Test
        id: test
        run: npm test --coverage --detectOpenHandles
        env:
          FIREBASE_CONFIG_ADMIN: ${{ secrets.FIREBASE_CONFIG_ADMIN }}
          FIREBASE_CONFIG_CLIENT: ${{ secrets.FIREBASE_CONFIG_CLIENT }}
          MONGODB_URI: ${{ secrets.MONGODB_URI }}
          REDI_PASSWORD: ${{ secrets.REDI_PASSWORD }}
          REDIS_PORT: ${{ secrets.REDIS_PORT }}
          REDIS_HOST: ${{ secrets.REDIS_HOST }}
          FIREBASE_API_KEY: ${{ secrets.FIREBASE_API_KEY }}
          ENCRYPTION_KEY: ${{ secrets.ENCRYPTION_KEY }}
          BACKEND_URL: ${{ secrets.BACKEND_URL }}
          HOST_NODE_MAILER: ${{ secrets.HOST_NODE_MAILER }}
          USER_NODE_MAILER: ${{ secrets.USER_NODE_MAILER }}
          PASS_NODE_MAILER: ${{ secrets.PASS_NODE_MAILER }}

      - name: Upload coverage reports to Codecov
        id: codecov
        uses: codecov/codecov-action@v5
        with:
          token: ${{ secrets.CODECOV_TOKEN }}

      - name: Detect failure
        if: failure()
        id: detect-failure
        run: |
          echo "FAILED_STEP=$(echo '${{ toJson(steps) }}' | jq -r 'to_entries[] | select(.value.outcome == "failure") | .key')" >> $GITHUB_OUTPUT

  auto-merge:
    needs: build-and-test
    runs-on: ubuntu-latest
    if: success()

    steps:
      - name: Checkout repository
        uses: actions/checkout@v3
        with:
          token: ${{ secrets.PERSONAL_ACCESS_TOKEN }}
          fetch-depth: 0

      - name: Setup Git
        run: |
          git config user.name "github-actions[bot]"
          git config user.email "github-actions[bot]@users.noreply.github.com"

      - name: Get current branch name
        id: vars
        run: echo "branch_name=${GITHUB_HEAD_REF:-${GITHUB_REF#refs/heads/}}" >> $GITHUB_OUTPUT

      - name: Fetch all branches
        run: |
          git fetch origin main
          git fetch origin ${{ steps.vars.outputs.branch_name }}

      - name: Merge feature into main
        run: |
          git checkout main
          git merge --no-ff origin/${{ steps.vars.outputs.branch_name }} -m "Auto-merge ${{ steps.vars.outputs.branch_name }} into main"

      - name: Push merged changes
        env:
          TOKEN: ${{ secrets.PERSONAL_ACCESS_TOKEN }}
        run: |
          git remote set-url origin https://x-access-token:${TOKEN}@github.com/${{ github.repository }}
          git push origin main


  notifications:
    needs: [build-and-test, auto-merge]
    runs-on: ubuntu-latest
    if: always()

    steps:
      # Send a Slack notification on success
      - name: Send Slack message on success
        if: needs.build-and-test.result == 'success' && needs.auto-merge.result == 'success'
        uses: rtCamp/action-slack-notify@v2
        env:
          SLACK_WEBHOOK: ${{ secrets.SLACK_WEBHOOK_URL }}
          SLACK_MESSAGE: |
            Build and tests passed on branch ${{ github.ref_name }}
            # Send an Email if build failed

      - name: Send Email if successful
        if: needs.build-and-test.result == 'success' && needs.auto-merge.result == 'success'
        uses: dawidd6/action-send-mail@v3
        with:
          server_address: smtp.gmail.com
          server_port: 465
          username: ${{ secrets.EMAIL_USERNAME }}
          password: ${{ secrets.EMAIL_PASSWORD }}
          subject: 'GitHub CI successful on ${{ github.repository }}'
          body: |
            The workflow was successful on branch ${{ github.ref_name }}.
            Commit: ${{ github.event.head_commit.message }}
          to: ${{ secrets.EMAIL_RECIPIENT }}
          from: ${{ secrets.EMAIL_USERNAME }}

      # Send a Slack notification on failure
      - name: Send Slack message on failure
        if: needs.build-and-test.result != 'success' || needs.auto-merge.result != 'success'
        uses: rtCamp/action-slack-notify@v2
        env:
          SLACK_WEBHOOK: ${{ secrets.SLACK_WEBHOOK_URL }}
          SLACK_MESSAGE: |
            Build or tests failed on branch ${{ github.ref_name }}
            Failed step: `${{ needs.build-and-test.outputs.failed_step || 'Unknown' }}`

      # Send an Email if build failed
      - name: Send Email if failed
        if: needs.build-and-test.result != 'success' || needs.auto-merge.result != 'success'
        uses: dawidd6/action-send-mail@v3
        with:
          server_address: smtp.gmail.com
          server_port: 465
          username: ${{ secrets.EMAIL_USERNAME }}
          password: ${{ secrets.EMAIL_PASSWORD }}
          subject: 'GitHub CI failed on ${{ github.repository }}'
          body: |
            The workflow failed on branch ${{ github.ref_name }}.
            Commit: ${{ github.event.head_commit.message }}
            failed step: `${{ needs.build-and-test.outputs.failed_step || 'Unknown' }}`
          to: ${{ secrets.EMAIL_RECIPIENT }}
          from: ${{ secrets.EMAIL_USERNAME }}
